import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  fetchConjugations
} from './conjugationsAPI';

const initialState = {
  conjugations: {},
  status: 'idle',
};



// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getConjugations = createAsyncThunk(
  'conjugations/fetchConjugations',
  async (tense) => {
    const response = await fetchConjugations(tense);
    // The value we return becomes the `fulfilled` action payload
    return response.data

  }
);

export const conjugationsSlice = createSlice({
  name: 'conjugations',
  initialState,

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getConjugations.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getConjugations.fulfilled, (state, action) => {
        state.status = 'idle';
        state.conjugations = action.payload;
      })
  },

});

export const selectConjugations = (state) => state.conjugations.conjugations;
export default conjugationsSlice.reducer;
