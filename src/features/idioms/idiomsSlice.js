import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  fetchIdioms,
  fetchIdiomsByMedia
} from './idiomsAPI';

const initialState = {
  idioms: [],
  status: 'idle'
};



// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getIdioms = createAsyncThunk(
  'media/fetchIdioms',
  async (lng) => {
    const response = await fetchIdioms(lng);
    // The value we return becomes the `fulfilled` action payload
    return response.data || [];
  }
);

export const getIdiomsByMedia = createAsyncThunk(
  'media/fetchIdiomsByMedia',
  async (media) => {
    const response = await fetchIdiomsByMedia(media);
    // The value we return becomes the `fulfilled` action payload
    return response.data || [];
  }
);

export const idiomsSlice = createSlice({
  name: 'idioms',
  initialState,

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getIdioms.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getIdioms.fulfilled, (state, action) => {
        state.status = 'idle';
        state.idioms = action.payload.idioms;
      })
      .addCase(getIdiomsByMedia.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getIdiomsByMedia.fulfilled, (state, action) => {
        state.status = 'idle';
        state.idioms = action.payload.idioms;
      })
  },

});

export const selectIdioms = (state) => state.idioms.idioms;
export const selectIdiomsByMedia = (state) => state.idioms.idioms;
export default idiomsSlice.reducer;
