import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import {
  fetchLanguages
} from './languagesAPI';


const initialState = {
  language: localStorage.getItem('language') || null,
  languages: []
};


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getLanguages = createAsyncThunk(
  'verbs/fetchLanguages',
  async () => {
    const response = await fetchLanguages();
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
);

export const languageSlice = createSlice({
  name: 'language',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setLanguage: (state, action) => {
      console.log(!!action.payload, action.payload)
      const language = action.payload.toLowerCase()
      localStorage.setItem('language', language)
      state.language = language;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getLanguages.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getLanguages.fulfilled, (state, action) => {
        state.status = 'idle';
        state.languages = action.payload;
      });
  },
});

export const selectLanguage = (state) => state.language.language;
export const selectLanguages = (state) => state.language.languages;
export const { setLanguage } = languageSlice.actions;
export default languageSlice.reducer;
