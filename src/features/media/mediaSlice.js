import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  fetchVerbsByMedia,
  fetchCapsByMedia,
  fetchCutsByMedia,
} from './mediaAPI';

const initialState = {
  verbs: [],
  caps: [],
  media: '',
  cuts: [],
  status: 'idle',
};



// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getVerbsByMedia = createAsyncThunk(
  'media/fetchVerbsByMedia',
  async (media) => {
    const response = await fetchVerbsByMedia(media);
    // The value we return becomes the `fulfilled` action payload
    return response.data || [];
  }
);

export const getCapsByMedia = createAsyncThunk(
  'media/fetchCapsByMedia',
  async (media) => {
    const response = await fetchCapsByMedia(media);
    // The value we return becomes the `fulfilled` action payload
    return response.data || [];
  }
);

export const getCutsByMedia = createAsyncThunk(
  'media/fetchCutsByMedia',
  async (media) => {
    const response = await fetchCutsByMedia(media);
    // The value we return becomes the `fulfilled` action payload
    return response.data || [];
  }
);

export const mediaSlice = createSlice({
  name: 'media',
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setMedia: (state, action) => {
      console.log("UPDATING MEDIA", action.payload)
      state.media = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getVerbsByMedia.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getVerbsByMedia.fulfilled, (state, action) => {
        state.status = 'idle';
        state.verbs = action.payload;
      })
      .addCase(getCapsByMedia.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getCapsByMedia.fulfilled, (state, action) => {
        state.status = 'idle';
        state.caps = action.payload;
      })
      .addCase(getCutsByMedia.pending, (state) => {
        //state.status = 'loading';
      })
      .addCase(getCutsByMedia.fulfilled, (state, action) => {
        //state.status = 'idle';
        state.cuts = action.payload;
      })
  },

});

export const selectVerbsByMedia = (state) => state.media.verbs;
export const selectCapsByMedia = (state) => state.media.caps;
export const selectCutsByMedia = (state) => state.media.cuts;
export const selectPrevMedia = (state) => state.media.media;
export const { setMedia } = mediaSlice.actions;
export const selectCapsByMediaStatus = (state) => state.media.status;
export default mediaSlice.reducer;
