import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  fetchVerbsByMedia
} from './mediaAPI';

const initialState = {
  verbs: [],
  media: '',
  status: 'idle',
};



// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getVerbsByMedia = createAsyncThunk(
  'media/fetchVerbsByMedia',
  async (media) => {
    console.log(media, 'Mmmm')
    const response = await fetchVerbsByMedia(media);
    // The value we return becomes the `fulfilled` action payload
    return response.data || [];
  }
);

export const mediaSlice = createSlice({
  name: 'media',
  initialState,

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getVerbsByMedia.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getVerbsByMedia.fulfilled, (state, action) => {
        state.status = 'idle';
        state.verbs = action.payload;
      })
  },

});

export const selectVerbsByMedia = (state) => state.media.verbs;
export default mediaSlice.reducer;
