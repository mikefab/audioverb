import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  fetchResult,
  fetchNeighborNums
} from './resultAPI';

const initialState = {
  result: [],
  neighborNums: {
    num_prev: null,
    num_next: null
  },
  status: 'idle',
};



// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getResult = createAsyncThunk(
  'result/fetchResult',
  async (obj) => {
    const response = await fetchResult(obj);
    // The value we return becomes the `fulfilled` action payload
    return response.data || {};
  }
);

export const getNeighborNums = createAsyncThunk(
  'result/fetchNeighborNums',
  async (obj) => {
    const response = await fetchNeighborNums(obj);
    // The value we return becomes the `fulfilled` action payload
    return response.data || {};
  }
);


export const resultSlice = createSlice({
  name: 'result',
  initialState,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getResult.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getResult.fulfilled, (state, action) => {
        state.status = 'idle';
        state.result = action.payload.caps;
        state.neighborNums = action.payload.neighborNums;
      })
      .addCase(getNeighborNums.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getNeighborNums.fulfilled, (state, action) => {
        state.status = 'idle';
        state.neighborNums = action.payload.neighborNums;
      })

  },

});

export const selectResult = (state) => state.result.result;
export const selectNeighborNums = (state) => state.result.neighborNums;
export default resultSlice.reducer;
