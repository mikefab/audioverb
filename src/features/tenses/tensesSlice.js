import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  fetchTenses
} from './tensesAPI';

const initialState = {
  tenses: [],
  tense: '',
  language: 'spanish',
  status: 'idle',
};



// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getTenses = createAsyncThunk(
  'tenses/fetchTenses',
  async () => {
    const response = await fetchTenses('spanish');
    // The value we return becomes the `fulfilled` action payload
    return response.data || [];
  }
);

export const tensesSlice = createSlice({
  name: 'tenses',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setTense: (state, action) => {
      state.tense = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTenses.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getTenses.fulfilled, (state, action) => {
        state.status = 'idle';
        state.tenses = action.payload;
      })
  },

});

export const selectTenses = (state) => state.tenses.tenses;
export const selectTense = (state) => state.tenses.tense;
export const { setTense } = tensesSlice.actions;
export default tensesSlice.reducer;
